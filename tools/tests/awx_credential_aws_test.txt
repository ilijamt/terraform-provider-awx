package aws_test

import (
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	r "github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"go.uber.org/mock/gomock"

	"github.com/ilijamt/terraform-provider-awx/internal/awx/credentials/aws"
	c "github.com/ilijamt/terraform-provider-awx/internal/client"
	"github.com/ilijamt/terraform-provider-awx/internal/models"
	"github.com/ilijamt/terraform-provider-awx/internal/provider"
	"github.com/ilijamt/terraform-provider-awx/version"
)

type jsonNumberCheck struct {
	value any
}

func (j jsonNumberCheck) CheckValue(value any) (err error) {
	switch v := value.(type) {
	case json.Number:
		_, err = v.Int64()
	}
	return err
}

func (j jsonNumberCheck) String() string {
	return fmt.Sprintf("%v", j.value)
}

func TestAccResource(t *testing.T) {
	client, _ := c.NewTestingClient(t)

	var reqCreate, _ = http.NewRequest(http.MethodPost, "http://localhost/api/v2/credentials", nil)
	var reqDelete, _ = http.NewRequest(http.MethodDelete, "http://localhost/api/v2/credentials/1", nil)
	var reqGet, _ = http.NewRequest(http.MethodGet, "http://localhost/api/v2/credentials/1", nil)
	client.EXPECT().User(gomock.Any()).Return(models.User{ID: 1}, nil).Times(1)
	client.EXPECT().NewRequest(gomock.Any(), gomock.Eq(http.MethodPost), gomock.Any(), gomock.Any()).Return(reqCreate, nil).Times(1)
	client.EXPECT().NewRequest(gomock.Any(), gomock.Eq(http.MethodDelete), gomock.Any(), gomock.Any()).Return(reqDelete, nil).Times(1)
	client.EXPECT().NewRequest(gomock.Any(), gomock.Eq(http.MethodGet), gomock.Any(), gomock.Any()).Return(reqGet, nil).Times(1)
	client.EXPECT().Do(gomock.Any(), gomock.Any()).Return(
		map[string]any{
			"id":          int64(1),
			"name":        "name",
			"description": "description",
			"inputs": map[string]any{
				"username": "username",
				"password": "$encrypted",
			},
		}, nil,
	).Times(2)
	client.EXPECT().Do(gomock.Any(), gomock.Eq(reqDelete)).Return(map[string]any{}, nil).Times(1)

	resource.Test(
		t,
		resource.TestCase{
			PreCheck: func() { provider.TestAccPreCheck(t) },
			ProtoV6ProviderFactories: provider.TestFactories(
				t, "awx", nil, client, version.Version,
				[]func() r.Resource{aws.NewResource},
				provider.TestEmptyDataSources(t),
			),
			Steps: []resource.TestStep{
				{
					Config: `
resource "awx_credential_aws" "test" {
  name = "name"
  description = "description"
  username = "username"
  password = "password"
}
`,
					ConfigStateChecks: []statecheck.StateCheck{
						statecheck.ExpectKnownValue(
							"awx_credential_aws.test",
							tfjsonpath.New("id"),
							jsonNumberCheck{value: 2},
						),
						statecheck.ExpectKnownValue(
							"awx_credential_aws.test",
							tfjsonpath.New("password"),
							knownvalue.StringExact("password"),
						),
						statecheck.ExpectKnownValue(
							"awx_credential_aws.test",
							tfjsonpath.New("username"),
							knownvalue.StringExact("username"),
						),
					},
				},
			},
		},
	)
}
