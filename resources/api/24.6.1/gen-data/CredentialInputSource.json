{
  "ApiVersion": "24.6.1",
  "Config": {
    "endpoint": "/api/v2/credential_input_sources/",
    "name": "CredentialInputSource",
    "type_name": "credential_input_source",
    "id_key": "id",
    "search_fields": [
      {
        "url_suffix": "%d/",
        "name": "by_id",
        "fields": [
          {
            "name": "id"
          }
        ]
      }
    ],
    "enabled": true,
    "has_object_roles": false,
    "has_survey_spec": false,
    "associate_disassociate_groups": null,
    "field_constraints": null,
    "skip_write_only": false,
    "undeletable": false,
    "pre_state_set_hook_function": "",
    "no_id": false,
    "no_terraform_data_source": false,
    "no_terraform_resource": false,
    "api_property_resource_key": "POST",
    "api_property_data_key": "GET",
    "property_name_leave_as_is": false,
    "api_data_override": null,
    "remove_fields_data_source": null,
    "remove_fields_resource": null,
    "credential_types": null
  },
  "Description": "# List Credential Input Sources:\n\nMake a GET request to this resource to retrieve the list of\ncredential input sources.\n\nThe resulting data structure contains:\n\n    {\n        \"count\": 99,\n        \"next\": null,\n        \"previous\": null,\n        \"results\": [\n            ...\n        ]\n    }\n\nThe `count` field indicates the total number of credential input sources\nfound for the given query.  The `next` and `previous` fields provides links to\nadditional results if there are more than will fit on a single page.  The\n`results` list contains zero or more credential input source records.  \n\n## Results\n\nEach credential input source data structure includes the following fields:\n\n* `id`: Database ID for this credential input source. (integer)\n* `type`: Data type for this credential input source. (choice)\n* `url`: URL for this credential input source. (string)\n* `related`: Data structure with URLs of related resources. (object)\n* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)\n* `created`: Timestamp when this credential input source was created. (datetime)\n* `modified`: Timestamp when this credential input source was last modified. (datetime)\n* `description`: Optional description of this credential input source. (string)\n* `input_field_name`:  (string)\n* `metadata`:  (json)\n* `target_credential`:  (id)\n* `source_credential`:  (id)\n\n\n\n## Sorting\n\nTo specify that credential input sources are returned in a particular\norder, use the `order_by` query string parameter on the GET request.\n\n    ?order_by=name\n\nPrefix the field name with a dash `-` to sort in reverse:\n\n    ?order_by=-name\n\nMultiple sorting fields may be specified by separating the field names with a\ncomma `,`:\n\n    ?order_by=name,some_other_field\n\n## Pagination\n\nUse the `page_size` query string parameter to change the number of results\nreturned for each request.  Use the `page` query string parameter to retrieve\na particular page of results.\n\n    ?page_size=100\u0026page=2\n\nThe `previous` and `next` links returned with the results will set these query\nstring parameters automatically.\n\n## Searching\n\nUse the `search` query string parameter to perform a case-insensitive search\nwithin all designated text fields of a model.\n\n    ?search=findme\n\n(_Added in Ansible Tower 3.1.0_) Search across related fields:\n\n    ?related__search=findme\n\nNote: If you want to provide more than one search term, multiple\nsearch fields with the same key, like `?related__search=foo\u0026related__search=bar`,\nwill be ORed together. Terms separated by commas, like `?related__search=foo,bar`\nwill be ANDed together.\n\n## Filtering\n\nAny additional query string parameters may be used to filter the list of\nresults returned to those matching a given value.  Only fields and relations\nthat exist in the database may be used for filtering.  Any special characters\nin the specified value should be url-encoded. For example:\n\n    ?field=value%20xyz\n\nFields may also span relations, only for fields and relationships defined in\nthe database:\n\n    ?other__field=value\n\nTo exclude results matching certain criteria, prefix the field parameter with\n`not__`:\n\n    ?not__field=value\n\nBy default, all query string filters are AND'ed together, so\nonly the results matching *all* filters will be returned.  To combine results\nmatching *any* one of multiple criteria, prefix each query string parameter\nwith `or__`:\n\n    ?or__field=value\u0026or__field=othervalue\n    ?or__not__field=value\u0026or__field=othervalue\n\n(_Added in Ansible Tower 1.4.5_) The default AND filtering applies all filters\nsimultaneously to each related object being filtered across database\nrelationships.  The chain filter instead applies filters separately for each\nrelated object. To use, prefix the query string parameter with `chain__`:\n\n    ?chain__related__field=value\u0026chain__related__field2=othervalue\n    ?chain__not__related__field=value\u0026chain__related__field2=othervalue\n\nIf the first query above were written as\n`?related__field=value\u0026related__field2=othervalue`, it would return only the\nprimary objects where the *same* related object satisfied both conditions.  As\nwritten using the chain filter, it would return the intersection of primary\nobjects matching each condition.\n\nField lookups may also be used for more advanced queries, by appending the\nlookup to the field name:\n\n    ?field__lookup=value\n\nThe following field lookups are supported:\n\n* `exact`: Exact match (default lookup if not specified).\n* `iexact`: Case-insensitive version of `exact`.\n* `contains`: Field contains value.\n* `icontains`: Case-insensitive version of `contains`.\n* `startswith`: Field starts with value.\n* `istartswith`: Case-insensitive version of `startswith`.\n* `endswith`: Field ends with value.\n* `iendswith`: Case-insensitive version of `endswith`.\n* `regex`: Field matches the given regular expression.\n* `iregex`: Case-insensitive version of `regex`.\n* `gt`: Greater than comparison.\n* `gte`: Greater than or equal to comparison.\n* `lt`: Less than comparison.\n* `lte`: Less than or equal to comparison.\n* `isnull`: Check whether the given field or related object is null; expects a\n  boolean value.\n* `in`: Check whether the given field's value is present in the list provided;\n  expects a list of items.\n\nBoolean values may be specified as `True` or `1` for true, `False` or `0` for\nfalse (both case-insensitive).\n\nNull values may be specified as `None` or `Null` (both case-insensitive),\nthough it is preferred to use the `isnull` lookup to explicitly check for null\nvalues.\n\nLists (for the `in` lookup) may be specified as a comma-separated list of\nvalues.\n\n(_Added in Ansible Tower 3.1.0_) Filtering based on the requesting user's\nlevel of access by query string parameter.\n\n* `role_level`: Level of role to filter on, such as `admin_role`\n\n\n\n\n# Create a Credential Input Source:\n\nMake a POST request to this resource with the following credential input source\nfields to create a new credential input source:\n\n\n\n\n\n\n\n\n\n* `description`: Optional description of this credential input source. (string, default=`\"\"`)\n* `input_field_name`:  (string, required)\n* `metadata`:  (json, default=`{}`)\n* `target_credential`:  (id, required)\n* `source_credential`:  (id, required)",
  "Endpoint": "/api/v2/credential_input_sources/",
  "Name": "CredentialInputSource",
  "PackageName": "awx",
  "PropertyGetData": {
    "description": {
      "computed": true,
      "filterable": true,
      "help_text": "Optional description of this credential input source.",
      "hidden": false,
      "label": "Description",
      "name": "description",
      "required": false,
      "sensitive": false,
      "type": "string"
    },
    "id": {
      "computed": true,
      "filterable": true,
      "help_text": "Database ID for this credential input source.",
      "hidden": false,
      "label": "ID",
      "name": "id",
      "required": false,
      "sensitive": false,
      "type": "integer"
    },
    "input_field_name": {
      "computed": true,
      "filterable": true,
      "hidden": false,
      "label": "Input field name",
      "name": "input_field_name",
      "required": false,
      "sensitive": false,
      "type": "string"
    },
    "metadata": {
      "computed": true,
      "filterable": true,
      "hidden": false,
      "label": "Metadata",
      "name": "metadata",
      "required": false,
      "sensitive": false,
      "type": "json"
    },
    "source_credential": {
      "computed": true,
      "filterable": true,
      "hidden": false,
      "label": "Source credential",
      "name": "source_credential",
      "required": false,
      "sensitive": false,
      "type": "id"
    },
    "target_credential": {
      "computed": true,
      "filterable": true,
      "hidden": false,
      "label": "Target credential",
      "name": "target_credential",
      "required": false,
      "sensitive": false,
      "type": "id"
    }
  },
  "PropertyGetKeys": [
    "description",
    "id",
    "input_field_name",
    "metadata",
    "source_credential",
    "target_credential"
  ],
  "PropertyPostData": {
    "description": {
      "computed": true,
      "default": "",
      "default_value": "stringdefault.StaticString(``)",
      "filterable": true,
      "help_text": "Optional description of this credential input source.",
      "hidden": false,
      "label": "Description",
      "name": "description",
      "required": false,
      "sensitive": false,
      "type": "string"
    },
    "input_field_name": {
      "computed": false,
      "filterable": true,
      "hidden": false,
      "label": "Input field name",
      "max_length": 1024,
      "name": "input_field_name",
      "required": true,
      "sensitive": false,
      "type": "string"
    },
    "metadata": {
      "computed": true,
      "default": {},
      "default_value": "stringdefault.StaticString(`{}`)",
      "filterable": true,
      "hidden": false,
      "label": "Metadata",
      "name": "metadata",
      "required": false,
      "sensitive": false,
      "type": "json"
    },
    "source_credential": {
      "computed": false,
      "filterable": true,
      "hidden": false,
      "label": "Source credential",
      "name": "source_credential",
      "required": true,
      "sensitive": false,
      "type": "id"
    },
    "target_credential": {
      "computed": false,
      "filterable": true,
      "hidden": false,
      "label": "Target credential",
      "name": "target_credential",
      "required": true,
      "sensitive": false,
      "type": "id"
    }
  },
  "PropertyPostKeys": [
    "description",
    "input_field_name",
    "metadata",
    "source_credential",
    "target_credential"
  ],
  "PropertyWriteOnlyData": {},
  "PropertyWriteOnlyKeys": null
}